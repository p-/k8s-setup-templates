# github build and deploy action
# prerequisites:
# - create namespace and serviceaccount
# - create container registry in github packages
# - store required secrets in repository setup. For multiple clusters repeat cluster1 variable for cluster2, cluster3, etc:
# - - secrets.GHCR_PAT_TOKEN             # container registry
# - - secrets.K8S_CLUSTER1_IP            # kubectl config cluster-ip
# - - secrets.K8S_CLUSTER1_CERT          # kubectl config cluster-cert
# - - secrets.K8S_CLUSTER1_USER_TOKEN    # service account token
# template replacements:
# - replace TEMPL_APP_NAME               # eg. cms-jekyll
# - replace TEMPL_K8S_NAMESPACE          # eg. cms-jekyll

name: Build and Deploy

on: [push]

env:
  GH_USER:    ${{ github.actor }}
  REG_NAME:   ghcr.io
  REG_PASS:   ${{ secrets.GHCR_PAT_TOKEN }}
  IMAGE_NAME: TEMPL_APP_NAME
  IMAGE_TAG:  "build-${{ github.run_number }}"
  IMAGE_FULL: "ghcr.io/${{ github.actor }}/TEMPL_APP_NAME:build-${{ github.run_number }}"

jobs:

  #############################################################################
  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Docker login
    - name: Log in to GitHub Docker Registry
      run: |-
        echo $REG_PASS | docker login $REG_NAME -u $GH_USER --password-stdin

    # Build the Docker image
    - name: Build in Docker
      run: |-
        docker build \
          --tag "$IMAGE_FULL" \
          --file docker/Dockerfile \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish to Container Registry
      run: |-
        docker push "$IMAGE_FULL"

  #############################################################################
  deploy:
    name: Deploy to Cluster1
    needs: [build]
    runs-on: ubuntu-latest
    environment: production
    env:
      K8S_NAMESPACE:      TEMPL_K8S_NAMESPACE
      K8S_FOLDER:         k8s/cluster1-prod
      K8S_CONTEXT_NAME:   cluster1
      K8S_CLUSTER_NAME:   cluster1-cluster
      K8S_CLUSTER_SERVER: ${{ secrets.K8S_CLUSTER1_IP }}
      K8S_CLUSTER_CERT:   ${{ secrets.K8S_CLUSTER1_CERT }}
      K8S_USER_NAME:      cluster1-sa
      K8S_USER_TOKEN:     ${{ secrets.K8S_CLUSTER1_USER_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Set K8s Credentials:
    - name: Get K8s credentials
      run: |-
        kubectl config view
        kubectl config set-cluster     $K8S_CLUSTER_NAME
        kubectl config set    clusters.$K8S_CLUSTER_NAME.server                     $K8S_CLUSTER_SERVER
        kubectl config set    clusters.$K8S_CLUSTER_NAME.certificate-authority-data $K8S_CLUSTER_CERT
        kubectl config set-credentials $K8S_USER_NAME    --token=$K8S_USER_TOKEN
        kubectl config set-context     $K8S_CONTEXT_NAME --user=$K8S_USER_NAME --cluster=$K8S_CLUSTER_NAME
        kubectl config use-context     $K8S_CONTEXT_NAME
        kubectl config view

    # Set up kustomize
    - name: Install Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy images secrets
    - name: Deploy image secrets
      run: |-
        kubectl create secret docker-registry regcred \
          --docker-server=$REG_NAME \
          --docker-username=$GH_USER \
          --docker-password=$REG_PASS \
          --namespace $K8S_NAMESPACE \
          --dry-run=client --save-config -o yaml \
          | kubectl apply -f -

    # Deploy the Docker image to the cluster1 cluster
    - name: Deploy to K8s cluster
      run: |-
        cd $K8S_FOLDER
        ../../kustomize edit set image $IMAGE_NAME=$IMAGE_FULL
        ../../kustomize build | kubectl apply -f -
        kubectl get all -n $K8S_NAMESPACE

